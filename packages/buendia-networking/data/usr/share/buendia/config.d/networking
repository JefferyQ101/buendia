#!/bin/bash

set -e; . /usr/share/buendia/utils.sh
SETTINGS=/usr/share/buendia/site/networking

# If the settings file is missing, generate a default one.
if [ ! -f $SETTINGS ]; then
    cat <<EOF > $SETTINGS
NETWORKING_AP=0
NETWORKING_SSID=GoogleGuest
NETWORKING_PASSWORD=
NETWORKING_DHCP_DNS_SERVER=0

# This setting only takes effect if NETWORKING_DHCP_DNS_SERVER is on.
NETWORKING_IP_ADDRESS=10.0.0.50
EOF
    . $SETTINGS
fi

cat <<EOF > /etc/network/interfaces
auto lo usb0 wlan0
iface lo inet loopback

iface wlan0 inet manual
    up echo 'ifconfig wlan0 $NETWORKING_IP_ADDRESS up' | buendia-enter-yocto
    down echo 'ifconfig wlan0 down' | buendia-enter-yocto
EOF

# dnsmasq runs in Debian, so its configuration file is managed in
# /usr/share/buendia/diversions and all we have to do here is turn it on.

case "$NETWORKING_DHCP_DNS_SERVER" in
    ''|0|false|off|no)
        echo "Turning off DHCP/DNS server; enabling DHCP client."

        # Disable dnsmasq for future boots.
        update-rc.d dnsmasq disable

        # Disable dnsmasq now.
        service dnsmasq stop

        # Enable the local DHCP client.
        cat <<'EOF' | buendia-enter-yocto
# Enable wpa_supplicant_event, which launches udhcpc.
systemctl start wpa_supplicant_event
systemctl enable wpa_supplicant_event
EOF
        ;;

    *)
        echo "Turning on DHCP/DNS server; disabling DHCP client."

        # Turn off the local DHCP client.
        cat <<'EOF' | buendia-enter-yocto
# Disable wpa_supplicant_event so that udhcpc doesn't get launched.
systemctl stop wpa_supplicant_event
systemctl disable wpa_supplicant_event
EOF
        killall udhcpc || true  # stop it if it's already running

        # Use the IP address configured in /etc/network/interfaces.
        ifconfig wlan0 up $NETWORKING_IP_ADDRESS

        # Enable dnsmasq for future boots.
        update-rc.d dnsmasq enable

        # Enable dnsmasq now.
        service dnsmasq restart
        ;;
esac


# hostapd runs in Yocto, so this script writes to the configuration directly.

case "$NETWORKING_AP" in
    ''|0|false|off|no)
        echo "Joining the existing wifi network '$NETWORKING_SSID'."
        cat <<'EOF' | buendia-enter-yocto
# Stop being an access point now.
systemctl stop hostapd

# On next boot, don't become an access point.
systemctl disable hostapd

# Connect to an existing wifi network.  This also causes the system
# to connect again on boot, reusing the same network SSID and password.
. /home/root/debian/usr/share/buendia/site/networking
PATH=/usr/local/bin:/usr/bin:$PATH
wifi $NETWORKING_SSID:$NETWORKING_PASSWORD
EOF
        ;;

    *)
        echo "Becoming an AP for a new wifi network '$NETWORKING_SSID'."
        cat <<'EOF' | buendia-enter-yocto
hostapd_conf=/etc/hostapd/hostapd.conf
. /home/root/debian/usr/share/buendia/site/networking

cp $hostapd_conf.pre-buendia $hostapd_conf
echo "ssid=$NETWORKING_SSID" >> $hostapd_conf
echo "wpa_passphrase=$NETWORKING_PASSWORD" >> $hostapd_conf

# Turn this machine into an access point now.
systemctl start hostapd

# On next boot, become an access point.
systemctl enable hostapd
EOF
        ;;
esac

# Update the /etc/hosts file with mappings for the server's IP addresses.
buendia-update-hosts
