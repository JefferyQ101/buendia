#!/bin/bash

set -e; . /usr/share/buendia/utils.sh
name=$(basename $0)
source="$1"

if [ "$1" = "-h" -o "$source" = "" ]; then
    echo "Usage: $0 [<device>|<directory>]"
    echo
    echo "Imports Buendia bundle files into the local package server."
    echo "Searches for files named projectbuendia-all-<anything>.zip or"
    echo "projectbuendia-<site-id>-<anything>.zip in the given directory"
    echo "or in the root directory of the given mountable device, and"
    echo "applies them to the system."
    echo
    echo "A bundle file is a zip file containing:"
    echo "  - .deb or .apk files, which will be placed at"
    echo "    /usr/share/buendia/packages and served by the package server"
    echo "  - settings files with names of the form NN-anything (where NN is"
    echo "    a number), which will be copied into /usr/share/buendia/site"
    echo "  - a file named commands.sh, which will be executed as a bash"
    echo "    script by root with the unpacked bundle as the current directory"
    echo
    echo "After each bundle is detected and unpacked, it is renamed by"
    echo "prepending 'installed-' so that it will not be automatically"
    echo "installed again.  However, bundles whose names contain '-reuse-'"
    echo "are special and get renamed by incrementing a number in the"
    echo "filename, and nothing is prepended, so they can be used again."
    exit 1
fi

exec 9> /var/run/lock/$name
if ! flock -n 9; then
    echo "$name already running; not starting."
    exit 1
fi

# Constructs the new name to which a bundle file is renamed after processing.
function adjust_filename() {
    filename="$1"
    (
        shopt -s nocasematch
        if [[ $filename =~ ^(.*-reuse)-?([0-9]*)([-.].*)$ ]]; then
            name=${BASH_REMATCH[1]}
            count=${BASH_REMATCH[2]}
            rest=${BASH_REMATCH[3]}
            let count=count+1
            echo $name-$count$rest
        else
            echo installed-$filename
        fi
    )  # restore shopt nocasematch
}

# Create temporary directories for mounting and extraction. $pkgdir should be
# located on the same filesystem as /usr/share/buendia/packages so that any
# packages dropped there can be moved into the repo instantaneously.
name=$(basename $0)
mntdir=/tmp/$name.mnt.$$
exdir=/tmp/$name.ex.$$
pkgdir=/usr/share/buendia/packages.import.$$
rm -rf $mntdir $exdir $pkgdir
mkdir $mntdir $exdir $pkgdir
trap 'rm -rf $exdir $pkgdir; umount $mntdir && rm -rf $mntdir || rmdir $mntdir; buendia-led red off || true' EXIT

# Mount the given device to a temporary directory.
if [ -b "$source" ]; then
    echo "$source is a block device; mounting..."
    mount $source $mntdir
    source="$mntdir"
elif [ -d "$source" ]; then
    echo "$source is a directory; scanning..."
else
    echo "$source is neither a block device nor a directory."
    exit 1
fi

# Search the directory for bundles.
cd "$source"

bundles=(projectbuendia-all{,-*}.zip)  # bundles addressed to all sites
if [ -n "$SITE_ID" ]; then
    bundles+=(projectbuendia-$SITE_ID{,-*}.zip)  # bundles specific to this site
fi

for file in "${bundles[@]}"; do
    if [ -f "$file" ]; then
        buendia-led red on 4 12 30 || true
        echo "Unpacking bundle: $file"
        if unzip -j -d "$exdir" "$file"; then
            unpacked+=("$file")
        fi
    fi
done

# Process the unpacked bundles.
if [ -n "$unpacked" ]; then
    (
        cd "$exdir"

        echo
        echo "$(date) - Unpacked for importing:"
        command ls -l
        echo

        # Move packages into the repo.
        debs=(*.deb)
        if [ -f "${debs[0]}" ]; then
            cp *.deb $pkgdir || true
        fi
        apks=(*.apk)
        if [ -f "${apks[0]}" ]; then
            cp *.apk $pkgdir || true
        fi
        let count=${#debs}+${#apks}

        if [ "$count" -gt 0 ]; then
            buendia-led red on 4 8 10 || true
            s=s; [ "$count" == 1 ] && s=
            mv $pkgdir/* /usr/share/buendia/packages/
            echo "Imported $count package$s."

            # Regenerate indexes.
            buendia-led red on 4 4 60 || true
            buendia-pkgserver-index-debs || true
            buendia-pkgserver-index-apks || true
            chmod -R a+rX /usr/share/buendia/packages
        fi

        # Copy over site settings files.
        for file in [0-9][0-9]-*; do
            if [ -f "$file" ]; then
                buendia-led red on 4 8 10 || true
                target=/usr/share/buendia/site/"$file"
                cp "$file" "$target"
                echo "Installed $target."
                settings_changed=1
            fi
        done

        # Mark installed bundles done now.  If reconfiguration scripts or
        # shell commands fail below, we still want to mark the bundles done,
        # to avoid repeatedly executing a broken script.
        for file in "${installed[@]}"; do
i           mv "$file" "$(adjust_filename "$file")"
        done

        cd "$source"

        # Now apply new settings.
        if [ -n "$settings_changed" ]; then
            echo "Settings changed.  Files:"
            ls -l /usr/share/buendia/site
            echo "Applying new settings:"
            buendia-settings
            buendia-led red on 4 4 10 || true
            buendia-reconfigure
        fi

        cd "$exdir"

        # Look for shell commands.
        if [ -f commands.sh ]; then
            echo "Executing shell script:"
            buendia-led red on 4 4 10 || true
            bash -x commands.sh || true
        fi
    ) 2>&1 | tee -a buendia-import.log
else
    echo "No bundles found."
fi

