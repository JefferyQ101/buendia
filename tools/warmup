#!/bin/bash

set -e
if [ -e /usr/share/buendia/utils.sh ]; then
    . /usr/share/buendia/utils.sh
fi
if [ "$1" = "-r" ]; then
    retry=yes
    shift
fi
hostport=$1

if [ "$1" = "-h" -o "$hostport" = "" ]; then
    echo "Usage: $0 [-r] <host>[:<port>]"
    echo
    echo "Makes requests to confirm that the Buendia API is available at the"
    echo "given host.  Also clears account lockouts (lockoutTimestamp property"
    echo "in the user_property table).  If -r is specified, keeps retrying"
    echo "until the server responds properly, for up to 15 minutes."
    exit 1
fi

tmpout=/tmp/warmup.out.$$
tmpgrep=/tmp/warmup.grep.$$
trap 'rm -rf $tmpout $tmpgrep' EXIT

OPENMRS_USER=${OPENMRS_USER:-$SERVER_OPENMRS_USER}
OPENMRS_PASSWORD=${OPENMRS_PASSWORD:-$SERVER_OPENMRS_PASSWORD}

if [ -z "$OPENMRS_USER" -o -z "$OPENMRS_PASSWORD" ]; then
    echo "Please set OPENMRS_USER and OPENMRS_PASSWORD."
    exit 1
fi

if [[ $hostport != *:* ]]; then
    hostport=$hostport:9000
fi

# After 7 failed attempts to log in within a short period of time, OpenMRS
# will lock out a user by setting the lockoutTimestamp property in the
# user_property table -- after which all API requests fail as unauthorized.
# We clear these lockouts when warming up the server.
function clear_lockouts() {
    MYSQL_USER=${MYSQL_USER:-$OPENMRS_MYSQL_USER}
    MYSQL_PASSWORD=${MYSQL_PASSWORD:-$OPENMRS_MYSQL_PASSWORD}
    if [ -n "$MYSQL_USER" -a -n "$MYSQL_PASSWORD" ]; then
        MYSQL="mysql -u$MYSQL_USER -p$MYSQL_PASSWORD openmrs"  # don't use quotes inside!
        count_lockouts="select count(*) from user_property where property = 'lockoutTimestamp';"
        lockouts=$($MYSQL <<< $count_lockouts)
        if ! $MYSQL <<< $count_lockouts | grep -q -w 0; then
            echo "Found lockouts in the user_property table.";
            $MYSQL <<< "delete from user_property where property = 'lockoutTimestamp';"
            if $MYSQL <<< $count_lockouts | grep -q -w 0; then
                echo "Cleared lockouts."
            else
                echo "Unable to clear all lockouts."
            fi
        fi
    fi
}

function check_url() {
    retry_count=0
    search="$1"
    shift
    if [ -z "$retry" ]; then
        buendia-led green on 4 4 360 || true  # should come up within 6 minutes
    fi
    while [[ $retry_count -lt 30 ]]; do
        echo
        echo "Trying $1..."
        curl -s -S -m 5 -i -L $@ 3>&1 1>$tmpout 2>&3 | grep . || true
        if [ -s $tmpout ]; then
            if grep -o "$search" $tmpout > $tmpgrep; then
                echo -n "Got a valid response containing: "
                head -1 $tmpgrep
                return 0
            fi
            echo "Got a response, but it did not contain /$search/."
            # Truncate the output to a maximum of 70 columns and 5 rows.
            sed -n -e '1,5 s/\(......................................................................\).*/\1.../' -e '1,5 s/^/> / p' -e '6 s/.*/[...]/ p' < $tmpout
        else
            echo "No response from server."
        fi

        buendia-led green off || true  # failure

        if [ -z "$retry" ]; then
            false
        fi
        let retry_count=retry_count+1
        sleep 5
    done
    echo "Giving up after $retry_count tries."
    false
}

echo "=== $(date): $0"
clear_lockouts

if [ -n "$retry" ]; then
    echo "Contacting Buendia API at $hostport (can take about 5 minutes)..."
else
    echo "Contacting Buendia API at $hostport (trying just once)..."
fi

# Tomcat
check_url 'HTTP.*200 OK' http://$hostport/

# OpenMRS
check_url '<title>.*OpenMRS' http://$hostport/openmrs

# Buendia
check_url '{"results":' http://$hostport/openmrs/ws/rest/v1/projectbuendia/user -u $OPENMRS_USER:$OPENMRS_PASSWORD

echo
echo "    \o/  Success!  Buendia API at $hostport is up."
echo

buendia-led green on || true  # success
