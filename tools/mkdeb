#!/bin/bash

output="$1"; shift
control="$1"; shift

if [ "$1" == "" ]; then
    cat <<EOF
Usage: $0 <output.deb> <control-dir> <root-path> [<root-path> ...]

Builds a Debian package at the specified output path, given the files to
install arranged under the given <root-path> and the control files in
<control-dir>.  If more than one <root-path> is specified, all files under
all roots are included; you must ensure that their contents do not collide.

If <control-dir> contains any files named *.template, they are rendered
(e.g. foo.template renders to produce foo) by performing bash-style parameter
expansion, command substitution, and arithmetic expansion.  These are
all the shell expansions triggered by the "\$" character: \$VAR and \${VAR}
expand to environment variables, \$(command) expands to the output of a
shell command, and \$((expression)) evaluates an arithmetic expression.

EOF
    exit 1
fi

set -e
pwd="$(pwd)"
tmp=/tmp/make_package.$$
rm -rf $tmp
TAR=$(which gtar || which tar)  # we need GNU tar for the --owner flag

# Copy the control files into a temporary directory.
mkdir -p $tmp/control
cp -pr $control/* $tmp/control

# Apply bash expansion to any *.template files.
for i in $tmp/control/*.template; do
    if [ -f $i ]; then
        cat <(echo 'cat <<EOF') $i <(echo 'EOF') | bash > ${i%.template}
        rm $i
    fi
done

# Pack up the Debian package.
$TAR cvfz $tmp/control.tar.gz -C $tmp/control .
$TAR cvf $tmp/data.tar -T /dev/null
while [ -n "$1" ]; do
    $TAR --owner=0 --group=0 -rvf $tmp/data.tar -C $1 .
    shift
done
gzip $tmp/data.tar
echo 2.0 > $tmp/debian-binary
mkdir -p $(dirname "$output")
ar -r $output $tmp/debian-binary $tmp/control.tar.gz $tmp/data.tar.gz
rm -rf $tmp
